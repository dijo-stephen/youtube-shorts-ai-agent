import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from groq import Groq
from datetime import datetime

def generate_content(topic):
    """Generate YouTube Shorts content using Groq AI"""
    
    # Initialize Groq client
    client = Groq(api_key=os.getenv('GROQ_API_KEY'))
    
    # Your predefined prompt
    prompt = f"""You are a creative content producer making highly engaging YouTube Shorts with a duration of 2 to 3 minutes. Your goal is to create a script titled **"5 Interesting and Unknown Facts About {topic}"** that educates, surprises, and entertains the viewer.

Here's what I need you to generate based on the topic **{topic}**:

--- **1. Video Script (2-3 minutes max):**
- Start with a catchy hook in the first 10 seconds to grab attention.
- Include 5 interesting, **lesser-known** or surprising facts about the topic.
- Each fact should be about 3‚Äì5 sentences long, and written in a tone that's clear, fun, and informative.
- Use proper grammar, punctuation, and transitions.
- End with a strong, curious outro encouraging likes or follows.

--- **2. AI Image Generation Prompts:**
For each of the 5 facts and for intro and outro, provide a **very detailed and vivid visual prompt with 9:16 vertical aspect ratio** that can be used to generate an image (e.g., with DALL¬∑E, Midjourney, or similar tools). The prompts should be clear, specific, and cinematic or visually exciting.

--- **3. YouTube Shorts Title:**
Generate a **click-worthy, SEO-friendly, and emotionally intriguing title** with a maximum of 80 characters. Should include a hook or surprising adjective.

--- **4. Video Description (SEO Optimized):**
- A short paragraph (2‚Äì4 lines) explaining what the video covers.
- Add a subtle CTA (call to action) like "Follow for more amazing facts!"
- Use keywords relevant to the topic and Shorts audience.

--- **5. Meta Tags / Hashtags:**
List 10‚Äì15 **relevant tags and hashtags** for better discoverability on YouTube Shorts. Include both general and niche terms related to the topic, such as:
- #shorts  
- #{topic.lower().replace(' ', '')}facts  
- #{topic.lower().replace(' ', '')}shorts  
- #{topic.lower().replace(' ', '')}trivia  
- #curiousfacts  
- #didyouknow

Always keep the **script length appropriate for a 2‚Äì3 minute video** when read at a normal pace (approx. 250‚Äì400 words total)."""

    try:
        # Generate content using Groq
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            # model="llama-3.1-70b-versatile",  # You can also use "mixtral-8x7b-32768" or other models
            model="llama-3.3-70b-versatile",  # You can also use "mixtral-8x7b-32768" or other models
            temperature=0.7,
            max_tokens=2000,
        )
        
        return chat_completion.choices[0].message.content
    
    except Exception as e:
        return f"Error generating content: {str(e)}"

def send_email(content, topic):
    """Send the generated content via Gmail"""
    
    try:
        # Email configuration
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = os.getenv('GMAIL_EMAIL')
        sender_password = os.getenv('GMAIL_APP_PASSWORD')
        to_email = "dijosylvester09@gmail.com,nimidakathaigal@gmail.com"
        recipient_list = [email.strip() for email in to_email.split(",")]
        
        if not all([sender_email, sender_password]):
            raise ValueError("Gmail credentials not found in environment variables")
        
        # Create message
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = to_email
        msg['Subject'] = f"üé¨ YouTube Shorts Content: {topic}"
        
        # Email body
        email_body = f"""
        <html>
        <body>
        <h2>üé¨ YouTube Shorts Content Generated Successfully!</h2>
        <p><strong>Topic:</strong> {topic}</p>
        <p><strong>Generated on:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC</p>
        <hr>
        <div style="white-space: pre-wrap; font-family: monospace; background-color: #f5f5f5; padding: 20px; border-radius: 8px;">
{content}
        </div>
        <hr>
        <p><em>Generated by your AI YouTube Shorts Content Agent</em></p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(email_body, 'html'))
        
        # Send email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        # server.sendmail(sender_email, sender_email, text)
        server.sendmail(sender_email, recipient_list, text)
        server.quit()
        
        print(f"‚úÖ Email sent successfully for topic: {topic}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error sending email: {str(e)}")
        return False

def main():
    """Main function to orchestrate content generation and email sending"""
    
    topic = os.getenv('TOPIC')
    
    if not topic:
        print("‚ùå No topic provided")
        return
    
    print(f"üöÄ Starting content generation for topic: {topic}")
    
    # Generate content
    print("ü§ñ Generating content with AI...")
    content = generate_content(topic)
    
    if content.startswith("Error"):
        print(f"‚ùå Content generation failed: {content}")
        return
    
    print("‚úÖ Content generated successfully")
    
    # Send email
    print("üìß Sending email...")
    if send_email(content, topic):
        print("üéâ Process completed successfully!")
    else:
        print("‚ùå Failed to send email")

if __name__ == "__main__":
    main()
